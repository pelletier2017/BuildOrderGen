
Features:
1)
Add build queue to GameState
  - add larva generation for hatchery to queue
       - maybe each unit can have an ability they add to queue on creation (ex queen spawn larva)
  - remove larva on creation of drone
  - remove hatchery on creation of queen
       - in unit collection if you get(hatchery) it will return 0, but its still available for tech

2)
Require tech to exist before making a unit (canCreate should check cost and tech)

3)
Convert desired UnitCollection to List<GameUnit> using tech requirement intelligently
  - 10 roach -> drone, hatchery, queen, overlord, spawning pool, roach warren

4)
Timeout where it will stop calculating after X time and give best result so far

5)
Add ability to require units at certain times ex "start speed by 2:00", "start 1 pair zerglings by 1:30"

Speed:
- maybe building attacking units before more workers will never be optimal (eco phase, military phase)
    - isEco flag in JSON
    - 2 lists for options?
         - only look through eco, then only look through army?
- hardcode opening if build order is large? Reduces a lot of the useless paths.
    - a few dif possible hardcoded openings to choose from, just pass in a GameState
- store an index on disk for the best way to get to a certain UnitCollection, this would be an implementation of the cache
    - must be invalidated any time config changes (do a check of index on startup)
- add threads and synchronize map (different implementation of BuildOrderGenerator)
    - could write a test that the two implementation arrive at the same answer
    - may need to have the Reporter store a list of build orders it has seen (they may not be in the same order for both implementations)

Details:
- tune mineral/gas income
- tune additional time to make buildings (travel time of worker)
- add extractor trick
